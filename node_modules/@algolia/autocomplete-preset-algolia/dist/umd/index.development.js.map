{"version":3,"file":"index.development.js","sources":["../../../autocomplete-shared/dist/esm/warn.js","../../src/highlight/getAttributeValueByPath.ts","../../src/constants/index.ts","../../src/highlight/parseAttribute.ts","../../src/highlight/parseAlgoliaHitHighlight.ts","../../src/highlight/isPartHighlighted.ts","../../src/highlight/reverseHighlightedParts.ts","../../src/highlight/parseAlgoliaHitReverseHighlight.ts","../../src/highlight/parseAlgoliaHitSnippet.ts","../../src/highlight/parseAlgoliaHitReverseSnippet.ts","../../src/version.ts","../../src/search/search.ts","../../src/search/getAlgoliaHits.ts","../../src/search/getAlgoliaResults.ts"],"sourcesContent":["export var warnCache = {\n  current: {}\n};\n/**\n * Logs a warning if the condition is not met.\n * This is used to log issues in development environment only.\n */\n\nexport function warn(condition, message) {\n  if (!(process.env.NODE_ENV !== 'production')) {\n    return;\n  }\n\n  if (condition) {\n    return;\n  }\n\n  var sanitizedMessage = message.trim();\n  var hasAlreadyPrinted = warnCache.current[sanitizedMessage];\n\n  if (!hasAlreadyPrinted) {\n    warnCache.current[sanitizedMessage] = true; // eslint-disable-next-line no-console\n\n    console.warn(\"[Autocomplete] \".concat(sanitizedMessage));\n  }\n}","export function getAttributeValueByPath<THit>(hit: THit, path: string): any {\n  const parts = path.split('.');\n  const value = parts.reduce((current, key) => current && current[key], hit);\n\n  return value;\n}\n","export const HIGHLIGHT_PRE_TAG = '__aa-highlight__';\nexport const HIGHLIGHT_POST_TAG = '__/aa-highlight__';\n","import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\nimport { ParsedAttribute } from './ParsedAttribute';\n\n/**\n * Creates a data structure that allows to concatenate similar highlighting\n * parts in a single value.\n */\nfunction createAttributeSet(initialValue: ParsedAttribute[] = []) {\n  const value = initialValue;\n\n  return {\n    get() {\n      return value;\n    },\n    add(part: ParsedAttribute) {\n      const lastPart: ParsedAttribute | undefined = value[value.length - 1];\n\n      if (lastPart?.isHighlighted === part.isHighlighted) {\n        value[value.length - 1] = {\n          value: lastPart.value + part.value,\n          isHighlighted: lastPart.isHighlighted,\n        };\n      } else {\n        value.push(part);\n      }\n    },\n  };\n}\n\ntype ParseAttributeParams = {\n  highlightedValue: string;\n};\n\nexport function parseAttribute({\n  highlightedValue,\n}: ParseAttributeParams): ParsedAttribute[] {\n  const preTagParts = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  const firstValue = preTagParts.shift();\n  const parts = createAttributeSet(\n    firstValue ? [{ value: firstValue, isHighlighted: false }] : []\n  );\n\n  preTagParts.forEach((part) => {\n    const postTagParts = part.split(HIGHLIGHT_POST_TAG);\n\n    parts.add({\n      value: postTagParts[0],\n      isHighlighted: true,\n    });\n\n    if (postTagParts[1] !== '') {\n      parts.add({\n        value: postTagParts[1],\n        isHighlighted: false,\n      });\n    }\n  });\n\n  return parts.get();\n}\n","import { warn } from '@algolia/autocomplete-shared';\nimport { Hit } from '@algolia/client-search';\n\nimport { getAttributeValueByPath } from './getAttributeValueByPath';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitHighlight<THit extends Hit<{}>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = `_highlightResult.${attribute}.value`;\n  let highlightedValue = getAttributeValueByPath(hit, path);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToHighlight\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToHighlight/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, attribute as string) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { ParsedAttribute } from './ParsedAttribute';\n\nconst htmlEscapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n};\nconst hasAlphanumeric = new RegExp(/\\w/i);\nconst regexEscapedHtml = /&(amp|quot|lt|gt|#39);/g;\nconst regexHasEscapedHtml = RegExp(regexEscapedHtml.source);\n\nfunction unescape(value: string): string {\n  return value && regexHasEscapedHtml.test(value)\n    ? value.replace(regexEscapedHtml, (character) => htmlEscapes[character])\n    : value;\n}\n\nexport function isPartHighlighted(parts: ParsedAttribute[], i: number) {\n  const current = parts[i];\n  const isNextHighlighted = parts[i + 1]?.isHighlighted || true;\n  const isPreviousHighlighted = parts[i - 1]?.isHighlighted || true;\n\n  if (\n    !hasAlphanumeric.test(unescape(current.value)) &&\n    isPreviousHighlighted === isNextHighlighted\n  ) {\n    return isPreviousHighlighted;\n  }\n\n  return current.isHighlighted;\n}\n","import { isPartHighlighted } from './isPartHighlighted';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function reverseHighlightedParts(parts: ParsedAttribute[]) {\n  // We don't want to highlight the whole word when no parts match.\n  if (!parts.some((part) => part.isHighlighted)) {\n    return parts.map((part) => ({ ...part, isHighlighted: false }));\n  }\n\n  return parts.map((part, i) => ({\n    ...part,\n    isHighlighted: !isPartHighlighted(parts, i),\n  }));\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { parseAlgoliaHitHighlight } from './parseAlgoliaHitHighlight';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseHighlight<THit extends Hit<{}>>(\n  props: ParseAlgoliaHitParams<THit>\n): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitHighlight<THit>(props));\n}\n","import { warn } from '@algolia/autocomplete-shared';\nimport { Hit } from '@algolia/client-search';\n\nimport { getAttributeValueByPath } from './getAttributeValueByPath';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitSnippet<THit extends Hit<{}>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = `_snippetResult.${attribute}.value`;\n  let highlightedValue = getAttributeValueByPath(hit, path);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToSnippet\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, attribute as string) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAlgoliaHitSnippet } from './parseAlgoliaHitSnippet';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseSnippet<THit extends Hit<{}>>(\n  props: ParseAlgoliaHitParams<THit>\n): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitSnippet<THit>(props));\n}\n","export const version = '1.0.0-alpha.39';\n","import { MultipleQueriesQuery } from '@algolia/client-search';\nimport { SearchClient } from 'algoliasearch/lite';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\nimport { version } from '../version';\n\nexport interface SearchParams {\n  searchClient: SearchClient;\n  queries: MultipleQueriesQuery[];\n}\n\nexport function search<TRecord>({ searchClient, queries }: SearchParams) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    searchClient.addAlgoliaAgent('autocomplete-core', version);\n  }\n\n  return searchClient.search<TRecord>(\n    queries.map((searchParameters) => {\n      const { indexName, query, params } = searchParameters;\n\n      return {\n        indexName,\n        query,\n        params: {\n          hitsPerPage: 5,\n          highlightPreTag: HIGHLIGHT_PRE_TAG,\n          highlightPostTag: HIGHLIGHT_POST_TAG,\n          ...params,\n        },\n      };\n    })\n  );\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaHits<TRecord>({\n  searchClient,\n  queries,\n}: SearchParams): Promise<Array<Array<Hit<TRecord>>>> {\n  return search<TRecord>({ searchClient, queries }).then((response) => {\n    const results = response.results;\n\n    return results.map((result) =>\n      result.hits.map((hit) => {\n        return {\n          ...hit,\n          __autocomplete_indexName: result.index,\n          __autocomplete_queryID: result.queryID,\n        };\n      })\n    );\n  });\n}\n","import { SearchResponse } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaResults<TRecord>({\n  searchClient,\n  queries,\n}: SearchParams): Promise<Array<SearchResponse<TRecord>>> {\n  return search<TRecord>({ searchClient, queries }).then((response) => {\n    return response.results;\n  });\n}\n"],"names":["warnCache","current","warn","condition","message","sanitizedMessage","trim","hasAlreadyPrinted","console","concat","getAttributeValueByPath","hit","path","parts","split","value","reduce","key","HIGHLIGHT_PRE_TAG","HIGHLIGHT_POST_TAG","createAttributeSet","initialValue","get","add","part","lastPart","length","isHighlighted","push","parseAttribute","highlightedValue","preTagParts","firstValue","shift","forEach","postTagParts","parseAlgoliaHitHighlight","attribute","process","JSON","stringify","htmlEscapes","hasAlphanumeric","RegExp","regexEscapedHtml","regexHasEscapedHtml","source","unescape","test","replace","character","isPartHighlighted","i","isNextHighlighted","isPreviousHighlighted","reverseHighlightedParts","some","map","parseAlgoliaHitReverseHighlight","props","parseAlgoliaHitSnippet","parseAlgoliaHitReverseSnippet","version","search","searchClient","queries","addAlgoliaAgent","searchParameters","indexName","query","params","hitsPerPage","highlightPreTag","highlightPostTag","getAlgoliaHits","then","response","results","result","hits","__autocomplete_indexName","index","__autocomplete_queryID","queryID","getAlgoliaResults"],"mappings":";;;;;;;EAAO,IAAIA,SAAS,GAAG;EACrBC,EAAAA,OAAO,EAAE;EADY,CAAhB;EAGP;EACA;EACA;EACA;;EAEO,SAASC,IAAT,CAAcC,SAAd,EAAyBC,OAAzB,EAAkC;;EAKvC,MAAID,SAAJ,EAAe;EACb;EACD;;EAED,MAAIE,gBAAgB,GAAGD,OAAO,CAACE,IAAR,EAAvB;EACA,MAAIC,iBAAiB,GAAGP,SAAS,CAACC,OAAV,CAAkBI,gBAAlB,CAAxB;;EAEA,MAAI,CAACE,iBAAL,EAAwB;EACtBP,IAAAA,SAAS,CAACC,OAAV,CAAkBI,gBAAlB,IAAsC,IAAtC,CADsB;;EAGtBG,IAAAA,OAAO,CAACN,IAAR,CAAa,kBAAkBO,MAAlB,CAAyBJ,gBAAzB,CAAb;EACD;;;ECxBI,SAASK,uBAAT,CAAuCC,GAAvC,EAAkDC,IAAlD,EAAqE;EAC1E,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAd;EACA,MAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAa,UAACf,OAAD,EAAUgB,GAAV;EAAA,WAAkBhB,OAAO,IAAIA,OAAO,CAACgB,GAAD,CAApC;EAAA,GAAb,EAAwDN,GAAxD,CAAd;EAEA,SAAOI,KAAP;EACD;;ECLM,IAAMG,iBAAiB,GAAG,kBAA1B;EACA,IAAMC,kBAAkB,GAAG,mBAA3B;;ECGP;EACA;EACA;EACA;EACA,SAASC,kBAAT,GAAkE;EAAA,MAAtCC,YAAsC,uEAAJ,EAAI;EAChE,MAAMN,KAAK,GAAGM,YAAd;EAEA,SAAO;EACLC,IAAAA,GADK,iBACC;EACJ,aAAOP,KAAP;EACD,KAHI;EAILQ,IAAAA,GAJK,eAIDC,IAJC,EAIsB;EACzB,UAAMC,QAAqC,GAAGV,KAAK,CAACA,KAAK,CAACW,MAAN,GAAe,CAAhB,CAAnD;;EAEA,UAAI,CAAAD,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,aAAV,MAA4BH,IAAI,CAACG,aAArC,EAAoD;EAClDZ,QAAAA,KAAK,CAACA,KAAK,CAACW,MAAN,GAAe,CAAhB,CAAL,GAA0B;EACxBX,UAAAA,KAAK,EAAEU,QAAQ,CAACV,KAAT,GAAiBS,IAAI,CAACT,KADL;EAExBY,UAAAA,aAAa,EAAEF,QAAQ,CAACE;EAFA,SAA1B;EAID,OALD,MAKO;EACLZ,QAAAA,KAAK,CAACa,IAAN,CAAWJ,IAAX;EACD;EACF;EAfI,GAAP;EAiBD;;EAMM,SAASK,cAAT,OAEqC;EAAA,MAD1CC,gBAC0C,QAD1CA,gBAC0C;EAC1C,MAAMC,WAAW,GAAGD,gBAAgB,CAAChB,KAAjB,CAAuBI,iBAAvB,CAApB;EACA,MAAMc,UAAU,GAAGD,WAAW,CAACE,KAAZ,EAAnB;EACA,MAAMpB,KAAK,GAAGO,kBAAkB,CAC9BY,UAAU,GAAG,CAAC;EAAEjB,IAAAA,KAAK,EAAEiB,UAAT;EAAqBL,IAAAA,aAAa,EAAE;EAApC,GAAD,CAAH,GAAmD,EAD/B,CAAhC;EAIAI,EAAAA,WAAW,CAACG,OAAZ,CAAoB,UAACV,IAAD,EAAU;EAC5B,QAAMW,YAAY,GAAGX,IAAI,CAACV,KAAL,CAAWK,kBAAX,CAArB;EAEAN,IAAAA,KAAK,CAACU,GAAN,CAAU;EACRR,MAAAA,KAAK,EAAEoB,YAAY,CAAC,CAAD,CADX;EAERR,MAAAA,aAAa,EAAE;EAFP,KAAV;;EAKA,QAAIQ,YAAY,CAAC,CAAD,CAAZ,KAAoB,EAAxB,EAA4B;EAC1BtB,MAAAA,KAAK,CAACU,GAAN,CAAU;EACRR,QAAAA,KAAK,EAAEoB,YAAY,CAAC,CAAD,CADX;EAERR,QAAAA,aAAa,EAAE;EAFP,OAAV;EAID;EACF,GAdD;EAgBA,SAAOd,KAAK,CAACS,GAAN,EAAP;EACD;;ECpDM,SAASc,wBAAT,OAG4C;EAAA,MAFjDzB,GAEiD,QAFjDA,GAEiD;EAAA,MADjD0B,SACiD,QADjDA,SACiD;EACjD,MAAMzB,IAAI,8BAAuByB,SAAvB,WAAV;EACA,MAAIP,gBAAgB,GAAGpB,uBAAuB,CAACC,GAAD,EAAMC,IAAN,CAA9C;;EAEA,MAAI,OAAOkB,gBAAP,KAA4B,QAAhC,EAA0C;EAf5CQ,IAAAA,aAAA,KAAyB,YAgBrB,GAAApC,IAAI,CACF,KADE,EAEF,wBAAiBqC,IAAI,CAACC,SAAL,CACf5B,IADe,CAAjB,8EAGE,uFALA,CAAJ;EAQAkB,IAAAA,gBAAgB,GAAGpB,uBAAuB,CAACC,GAAD,EAAM0B,SAAN,CAAvB,IAAqD,EAAxE;EACD;;EAED,SAAOR,cAAc,CAAC;EAAEC,IAAAA,gBAAgB,EAAhBA;EAAF,GAAD,CAArB;EACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC1BD,IAAMW,WAAW,GAAG;EAClB,WAAS,GADS;EAElB,UAAQ,GAFU;EAGlB,UAAQ,GAHU;EAIlB,YAAU,GAJQ;EAKlB,WAAS;EALS,CAApB;EAOA,IAAMC,eAAe,GAAG,IAAIC,MAAJ,CAAW,KAAX,CAAxB;EACA,IAAMC,gBAAgB,GAAG,yBAAzB;EACA,IAAMC,mBAAmB,GAAGF,MAAM,CAACC,gBAAgB,CAACE,MAAlB,CAAlC;;EAEA,SAASC,QAAT,CAAkBhC,KAAlB,EAAyC;EACvC,SAAOA,KAAK,IAAI8B,mBAAmB,CAACG,IAApB,CAAyBjC,KAAzB,CAAT,GACHA,KAAK,CAACkC,OAAN,CAAcL,gBAAd,EAAgC,UAACM,SAAD;EAAA,WAAeT,WAAW,CAACS,SAAD,CAA1B;EAAA,GAAhC,CADG,GAEHnC,KAFJ;EAGD;;EAEM,SAASoC,iBAAT,CAA2BtC,KAA3B,EAAqDuC,CAArD,EAAgE;EAAA;;EACrE,MAAMnD,OAAO,GAAGY,KAAK,CAACuC,CAAD,CAArB;EACA,MAAMC,iBAAiB,GAAG,WAAAxC,KAAK,CAACuC,CAAC,GAAG,CAAL,CAAL,kDAAczB,aAAd,KAA+B,IAAzD;EACA,MAAM2B,qBAAqB,GAAG,YAAAzC,KAAK,CAACuC,CAAC,GAAG,CAAL,CAAL,oDAAczB,aAAd,KAA+B,IAA7D;;EAEA,MACE,CAACe,eAAe,CAACM,IAAhB,CAAqBD,QAAQ,CAAC9C,OAAO,CAACc,KAAT,CAA7B,CAAD,IACAuC,qBAAqB,KAAKD,iBAF5B,EAGE;EACA,WAAOC,qBAAP;EACD;;EAED,SAAOrD,OAAO,CAAC0B,aAAf;EACD;;EC7BM,SAAS4B,uBAAT,CAAiC1C,KAAjC,EAA2D;EAChE;EACA,MAAI,CAACA,KAAK,CAAC2C,IAAN,CAAW,UAAChC,IAAD;EAAA,WAAUA,IAAI,CAACG,aAAf;EAAA,GAAX,CAAL,EAA+C;EAC7C,WAAOd,KAAK,CAAC4C,GAAN,CAAU,UAACjC,IAAD;EAAA,+CAAgBA,IAAhB;EAAsBG,QAAAA,aAAa,EAAE;EAArC;EAAA,KAAV,CAAP;EACD;;EAED,SAAOd,KAAK,CAAC4C,GAAN,CAAU,UAACjC,IAAD,EAAO4B,CAAP;EAAA,6CACZ5B,IADY;EAEfG,MAAAA,aAAa,EAAE,CAACwB,iBAAiB,CAACtC,KAAD,EAAQuC,CAAR;EAFlB;EAAA,GAAV,CAAP;EAID;;ECNM,SAASM,+BAAT,CACLC,KADK,EAEc;EACnB,SAAOJ,uBAAuB,CAACnB,wBAAwB,CAAOuB,KAAP,CAAzB,CAA9B;EACD;;ECHM,SAASC,sBAAT,OAG4C;EAAA,MAFjDjD,GAEiD,QAFjDA,GAEiD;EAAA,MADjD0B,SACiD,QADjDA,SACiD;EACjD,MAAMzB,IAAI,4BAAqByB,SAArB,WAAV;EACA,MAAIP,gBAAgB,GAAGpB,uBAAuB,CAACC,GAAD,EAAMC,IAAN,CAA9C;;EAEA,MAAI,OAAOkB,gBAAP,KAA4B,QAAhC,EAA0C;EAf5CQ,IAAAA,aAAA,KAAyB,YAgBrB,GAAApC,IAAI,CACF,KADE,EAEF,wBAAiBqC,IAAI,CAACC,SAAL,CACf5B,IADe,CAAjB,4EAGE,qFALA,CAAJ;EAQAkB,IAAAA,gBAAgB,GAAGpB,uBAAuB,CAACC,GAAD,EAAM0B,SAAN,CAAvB,IAAqD,EAAxE;EACD;;EAED,SAAOR,cAAc,CAAC;EAAEC,IAAAA,gBAAgB,EAAhBA;EAAF,GAAD,CAArB;EACD;;ECrBM,SAAS+B,6BAAT,CACLF,KADK,EAEc;EACnB,SAAOJ,uBAAuB,CAACK,sBAAsB,CAAOD,KAAP,CAAvB,CAA9B;EACD;;ECXM,IAAMG,OAAO,GAAG,gBAAhB;;ECWA,SAASC,MAAT,OAAkE;EAAA,MAAvCC,YAAuC,QAAvCA,YAAuC;EAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;;EACvE,MAAI,OAAOD,YAAY,CAACE,eAApB,KAAwC,UAA5C,EAAwD;EACtDF,IAAAA,YAAY,CAACE,eAAb,CAA6B,mBAA7B,EAAkDJ,OAAlD;EACD;;EAED,SAAOE,YAAY,CAACD,MAAb,CACLE,OAAO,CAACR,GAAR,CAAY,UAACU,gBAAD,EAAsB;EAAA,QACxBC,SADwB,GACKD,gBADL,CACxBC,SADwB;EAAA,QACbC,KADa,GACKF,gBADL,CACbE,KADa;EAAA,QACNC,MADM,GACKH,gBADL,CACNG,MADM;EAGhC,WAAO;EACLF,MAAAA,SAAS,EAATA,SADK;EAELC,MAAAA,KAAK,EAALA,KAFK;EAGLC,MAAAA,MAAM;EACJC,QAAAA,WAAW,EAAE,CADT;EAEJC,QAAAA,eAAe,EAAEtD,iBAFb;EAGJuD,QAAAA,gBAAgB,EAAEtD;EAHd,SAIDmD,MAJC;EAHD,KAAP;EAUD,GAbD,CADK,CAAP;EAgBD;;EC5BM,SAASI,cAAT,OAG+C;EAAA,MAFpDV,YAEoD,QAFpDA,YAEoD;EAAA,MADpDC,OACoD,QADpDA,OACoD;EACpD,SAAOF,MAAM,CAAU;EAAEC,IAAAA,YAAY,EAAZA,YAAF;EAAgBC,IAAAA,OAAO,EAAPA;EAAhB,GAAV,CAAN,CAA2CU,IAA3C,CAAgD,UAACC,QAAD,EAAc;EACnE,QAAMC,OAAO,GAAGD,QAAQ,CAACC,OAAzB;EAEA,WAAOA,OAAO,CAACpB,GAAR,CAAY,UAACqB,MAAD;EAAA,aACjBA,MAAM,CAACC,IAAP,CAAYtB,GAAZ,CAAgB,UAAC9C,GAAD,EAAS;EACvB,iDACKA,GADL;EAEEqE,UAAAA,wBAAwB,EAAEF,MAAM,CAACG,KAFnC;EAGEC,UAAAA,sBAAsB,EAAEJ,MAAM,CAACK;EAHjC;EAKD,OAND,CADiB;EAAA,KAAZ,CAAP;EASD,GAZM,CAAP;EAaD;;ECjBM,SAASC,iBAAT,OAGmD;EAAA,MAFxDpB,YAEwD,QAFxDA,YAEwD;EAAA,MADxDC,OACwD,QADxDA,OACwD;EACxD,SAAOF,MAAM,CAAU;EAAEC,IAAAA,YAAY,EAAZA,YAAF;EAAgBC,IAAAA,OAAO,EAAPA;EAAhB,GAAV,CAAN,CAA2CU,IAA3C,CAAgD,UAACC,QAAD,EAAc;EACnE,WAAOA,QAAQ,CAACC,OAAhB;EACD,GAFM,CAAP;EAGD;;;;;;;;;;;"}