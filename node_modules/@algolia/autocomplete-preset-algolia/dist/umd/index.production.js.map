{"version":3,"file":"index.production.js","sources":["../../src/highlight/getAttributeValueByPath.ts","../../src/constants/index.ts","../../src/highlight/parseAttribute.ts","../../src/highlight/parseAlgoliaHitHighlight.ts","../../src/highlight/isPartHighlighted.ts","../../src/highlight/reverseHighlightedParts.ts","../../src/highlight/parseAlgoliaHitSnippet.ts","../../src/search/search.ts","../../src/version.ts","../../src/search/getAlgoliaHits.ts","../../src/search/getAlgoliaResults.ts","../../src/highlight/parseAlgoliaHitReverseHighlight.ts","../../src/highlight/parseAlgoliaHitReverseSnippet.ts"],"sourcesContent":["export function getAttributeValueByPath<THit>(hit: THit, path: string): any {\n  const parts = path.split('.');\n  const value = parts.reduce((current, key) => current && current[key], hit);\n\n  return value;\n}\n","export const HIGHLIGHT_PRE_TAG = '__aa-highlight__';\nexport const HIGHLIGHT_POST_TAG = '__/aa-highlight__';\n","import { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\n\nimport { ParsedAttribute } from './ParsedAttribute';\n\n/**\n * Creates a data structure that allows to concatenate similar highlighting\n * parts in a single value.\n */\nfunction createAttributeSet(initialValue: ParsedAttribute[] = []) {\n  const value = initialValue;\n\n  return {\n    get() {\n      return value;\n    },\n    add(part: ParsedAttribute) {\n      const lastPart: ParsedAttribute | undefined = value[value.length - 1];\n\n      if (lastPart?.isHighlighted === part.isHighlighted) {\n        value[value.length - 1] = {\n          value: lastPart.value + part.value,\n          isHighlighted: lastPart.isHighlighted,\n        };\n      } else {\n        value.push(part);\n      }\n    },\n  };\n}\n\ntype ParseAttributeParams = {\n  highlightedValue: string;\n};\n\nexport function parseAttribute({\n  highlightedValue,\n}: ParseAttributeParams): ParsedAttribute[] {\n  const preTagParts = highlightedValue.split(HIGHLIGHT_PRE_TAG);\n  const firstValue = preTagParts.shift();\n  const parts = createAttributeSet(\n    firstValue ? [{ value: firstValue, isHighlighted: false }] : []\n  );\n\n  preTagParts.forEach((part) => {\n    const postTagParts = part.split(HIGHLIGHT_POST_TAG);\n\n    parts.add({\n      value: postTagParts[0],\n      isHighlighted: true,\n    });\n\n    if (postTagParts[1] !== '') {\n      parts.add({\n        value: postTagParts[1],\n        isHighlighted: false,\n      });\n    }\n  });\n\n  return parts.get();\n}\n","import { warn } from '@algolia/autocomplete-shared';\nimport { Hit } from '@algolia/client-search';\n\nimport { getAttributeValueByPath } from './getAttributeValueByPath';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitHighlight<THit extends Hit<{}>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = `_highlightResult.${attribute}.value`;\n  let highlightedValue = getAttributeValueByPath(hit, path);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToHighlight\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToHighlight/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, attribute as string) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { ParsedAttribute } from './ParsedAttribute';\n\nconst htmlEscapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\",\n};\nconst hasAlphanumeric = new RegExp(/\\w/i);\nconst regexEscapedHtml = /&(amp|quot|lt|gt|#39);/g;\nconst regexHasEscapedHtml = RegExp(regexEscapedHtml.source);\n\nfunction unescape(value: string): string {\n  return value && regexHasEscapedHtml.test(value)\n    ? value.replace(regexEscapedHtml, (character) => htmlEscapes[character])\n    : value;\n}\n\nexport function isPartHighlighted(parts: ParsedAttribute[], i: number) {\n  const current = parts[i];\n  const isNextHighlighted = parts[i + 1]?.isHighlighted || true;\n  const isPreviousHighlighted = parts[i - 1]?.isHighlighted || true;\n\n  if (\n    !hasAlphanumeric.test(unescape(current.value)) &&\n    isPreviousHighlighted === isNextHighlighted\n  ) {\n    return isPreviousHighlighted;\n  }\n\n  return current.isHighlighted;\n}\n","import { isPartHighlighted } from './isPartHighlighted';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function reverseHighlightedParts(parts: ParsedAttribute[]) {\n  // We don't want to highlight the whole word when no parts match.\n  if (!parts.some((part) => part.isHighlighted)) {\n    return parts.map((part) => ({ ...part, isHighlighted: false }));\n  }\n\n  return parts.map((part, i) => ({\n    ...part,\n    isHighlighted: !isPartHighlighted(parts, i),\n  }));\n}\n","import { warn } from '@algolia/autocomplete-shared';\nimport { Hit } from '@algolia/client-search';\n\nimport { getAttributeValueByPath } from './getAttributeValueByPath';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAttribute } from './parseAttribute';\nimport { ParsedAttribute } from './ParsedAttribute';\n\nexport function parseAlgoliaHitSnippet<THit extends Hit<{}>>({\n  hit,\n  attribute,\n}: ParseAlgoliaHitParams<THit>): ParsedAttribute[] {\n  const path = `_snippetResult.${attribute}.value`;\n  let highlightedValue = getAttributeValueByPath(hit, path);\n\n  if (typeof highlightedValue !== 'string') {\n    warn(\n      false,\n      `The attribute ${JSON.stringify(\n        path\n      )} does not exist on the hit. Did you set it in \\`attributesToSnippet\\`?` +\n        '\\nSee https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/'\n    );\n\n    highlightedValue = getAttributeValueByPath(hit, attribute as string) || '';\n  }\n\n  return parseAttribute({ highlightedValue });\n}\n","import { MultipleQueriesQuery } from '@algolia/client-search';\nimport { SearchClient } from 'algoliasearch/lite';\n\nimport { HIGHLIGHT_PRE_TAG, HIGHLIGHT_POST_TAG } from '../constants';\nimport { version } from '../version';\n\nexport interface SearchParams {\n  searchClient: SearchClient;\n  queries: MultipleQueriesQuery[];\n}\n\nexport function search<TRecord>({ searchClient, queries }: SearchParams) {\n  if (typeof searchClient.addAlgoliaAgent === 'function') {\n    searchClient.addAlgoliaAgent('autocomplete-core', version);\n  }\n\n  return searchClient.search<TRecord>(\n    queries.map((searchParameters) => {\n      const { indexName, query, params } = searchParameters;\n\n      return {\n        indexName,\n        query,\n        params: {\n          hitsPerPage: 5,\n          highlightPreTag: HIGHLIGHT_PRE_TAG,\n          highlightPostTag: HIGHLIGHT_POST_TAG,\n          ...params,\n        },\n      };\n    })\n  );\n}\n","export const version = '1.0.0-alpha.39';\n","import { Hit } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaHits<TRecord>({\n  searchClient,\n  queries,\n}: SearchParams): Promise<Array<Array<Hit<TRecord>>>> {\n  return search<TRecord>({ searchClient, queries }).then((response) => {\n    const results = response.results;\n\n    return results.map((result) =>\n      result.hits.map((hit) => {\n        return {\n          ...hit,\n          __autocomplete_indexName: result.index,\n          __autocomplete_queryID: result.queryID,\n        };\n      })\n    );\n  });\n}\n","import { SearchResponse } from '@algolia/client-search';\n\nimport { search, SearchParams } from './search';\n\nexport function getAlgoliaResults<TRecord>({\n  searchClient,\n  queries,\n}: SearchParams): Promise<Array<SearchResponse<TRecord>>> {\n  return search<TRecord>({ searchClient, queries }).then((response) => {\n    return response.results;\n  });\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { parseAlgoliaHitHighlight } from './parseAlgoliaHitHighlight';\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseHighlight<THit extends Hit<{}>>(\n  props: ParseAlgoliaHitParams<THit>\n): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitHighlight<THit>(props));\n}\n","import { Hit } from '@algolia/client-search';\n\nimport { ParseAlgoliaHitParams } from './ParseAlgoliaHitParams';\nimport { parseAlgoliaHitSnippet } from './parseAlgoliaHitSnippet';\nimport { ParsedAttribute } from './ParsedAttribute';\nimport { reverseHighlightedParts } from './reverseHighlightedParts';\n\nexport function parseAlgoliaHitReverseSnippet<THit extends Hit<{}>>(\n  props: ParseAlgoliaHitParams<THit>\n): ParsedAttribute[] {\n  return reverseHighlightedParts(parseAlgoliaHitSnippet<THit>(props));\n}\n"],"names":["getAttributeValueByPath","hit","path","split","reduce","current","key","HIGHLIGHT_PRE_TAG","HIGHLIGHT_POST_TAG","parseAttribute","preTagParts","highlightedValue","firstValue","shift","parts","value","get","add","part","lastPart","length","isHighlighted","push","createAttributeSet","forEach","postTagParts","parseAlgoliaHitHighlight","attribute","htmlEscapes","hasAlphanumeric","RegExp","regexEscapedHtml","regexHasEscapedHtml","source","isPartHighlighted","i","isNextHighlighted","isPreviousHighlighted","test","replace","character","reverseHighlightedParts","some","map","parseAlgoliaHitSnippet","search","searchClient","queries","addAlgoliaAgent","searchParameters","indexName","query","params","hitsPerPage","highlightPreTag","highlightPostTag","then","response","results","result","hits","__autocomplete_indexName","index","__autocomplete_queryID","queryID","props"],"mappings":"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"}